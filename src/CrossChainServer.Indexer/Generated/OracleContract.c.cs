// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: oracle_contract.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using System.Collections.Generic;
using aelf = global::AElf.CSharp.Core;

namespace AElf.Contracts.Oracle {

  #region Events
  public partial class QueryCreated : aelf::IEvent<QueryCreated>
  {
    public global::System.Collections.Generic.IEnumerable<QueryCreated> GetIndexed()
    {
      return new List<QueryCreated>
      {
      };
    }

    public QueryCreated GetNonIndexed()
    {
      return new QueryCreated
      {
        Payment = Payment,
        CallbackInfo = CallbackInfo,
        AggregatorContractAddress = AggregatorContractAddress,
        DesignatedNodeList = DesignatedNodeList,
        QueryInfo = QueryInfo,
        AggregateThreshold = AggregateThreshold,
        QuerySender = QuerySender,
        QueryId = QueryId,
        Token = Token,
        MaximumPermissibleDeviation = MaximumPermissibleDeviation,
        AggregateOption = AggregateOption,
        TaskId = TaskId,
      };
    }
  }

  public partial class QueryTaskCreated : aelf::IEvent<QueryTaskCreated>
  {
    public global::System.Collections.Generic.IEnumerable<QueryTaskCreated> GetIndexed()
    {
      return new List<QueryTaskCreated>
      {
      };
    }

    public QueryTaskCreated GetNonIndexed()
    {
      return new QueryTaskCreated
      {
        EachPayment = EachPayment,
        SupposedQueryTimes = SupposedQueryTimes,
        QueryInfo = QueryInfo,
        EndTime = EndTime,
        DesignatedNodeList = DesignatedNodeList,
        AggregatorContractAddress = AggregatorContractAddress,
        CallbackInfo = CallbackInfo,
        Creator = Creator,
        AggregateThreshold = AggregateThreshold,
        AggregateOption = AggregateOption,
      };
    }
  }

  public partial class QueryCancelled : aelf::IEvent<QueryCancelled>
  {
    public global::System.Collections.Generic.IEnumerable<QueryCancelled> GetIndexed()
    {
      return new List<QueryCancelled>
      {
      };
    }

    public QueryCancelled GetNonIndexed()
    {
      return new QueryCancelled
      {
        QueryId = QueryId,
      };
    }
  }

  public partial class SufficientCommitmentsCollected : aelf::IEvent<SufficientCommitmentsCollected>
  {
    public global::System.Collections.Generic.IEnumerable<SufficientCommitmentsCollected> GetIndexed()
    {
      return new List<SufficientCommitmentsCollected>
      {
      };
    }

    public SufficientCommitmentsCollected GetNonIndexed()
    {
      return new SufficientCommitmentsCollected
      {
        QueryId = QueryId,
      };
    }
  }

  public partial class Committed : aelf::IEvent<Committed>
  {
    public global::System.Collections.Generic.IEnumerable<Committed> GetIndexed()
    {
      return new List<Committed>
      {
      };
    }

    public Committed GetNonIndexed()
    {
      return new Committed
      {
        QueryId = QueryId,
        OracleNodeAddress = OracleNodeAddress,
        Commitment = Commitment,
      };
    }
  }

  public partial class CommitmentRevealed : aelf::IEvent<CommitmentRevealed>
  {
    public global::System.Collections.Generic.IEnumerable<CommitmentRevealed> GetIndexed()
    {
      return new List<CommitmentRevealed>
      {
      };
    }

    public CommitmentRevealed GetNonIndexed()
    {
      return new CommitmentRevealed
      {
        QueryId = QueryId,
        OracleNodeAddress = OracleNodeAddress,
        Commitment = Commitment,
        RevealData = RevealData,
        Salt = Salt,
      };
    }
  }

  public partial class CommitmentRevealFailed : aelf::IEvent<CommitmentRevealFailed>
  {
    public global::System.Collections.Generic.IEnumerable<CommitmentRevealFailed> GetIndexed()
    {
      return new List<CommitmentRevealFailed>
      {
      };
    }

    public CommitmentRevealFailed GetNonIndexed()
    {
      return new CommitmentRevealFailed
      {
        QueryId = QueryId,
        OracleNodeAddress = OracleNodeAddress,
        Commitment = Commitment,
        RevealData = RevealData,
        Salt = Salt,
      };
    }
  }

  public partial class QueryCompletedWithAggregation : aelf::IEvent<QueryCompletedWithAggregation>
  {
    public global::System.Collections.Generic.IEnumerable<QueryCompletedWithAggregation> GetIndexed()
    {
      return new List<QueryCompletedWithAggregation>
      {
      };
    }

    public QueryCompletedWithAggregation GetNonIndexed()
    {
      return new QueryCompletedWithAggregation
      {
        QueryId = QueryId,
        Result = Result,
      };
    }
  }

  public partial class QueryCompletedWithoutAggregation : aelf::IEvent<QueryCompletedWithoutAggregation>
  {
    public global::System.Collections.Generic.IEnumerable<QueryCompletedWithoutAggregation> GetIndexed()
    {
      return new List<QueryCompletedWithoutAggregation>
      {
      };
    }

    public QueryCompletedWithoutAggregation GetNonIndexed()
    {
      return new QueryCompletedWithoutAggregation
      {
        QueryId = QueryId,
        Result = Result,
      };
    }
  }

  public partial class TokenLocked : aelf::IEvent<TokenLocked>
  {
    public global::System.Collections.Generic.IEnumerable<TokenLocked> GetIndexed()
    {
      return new List<TokenLocked>
      {
      };
    }

    public TokenLocked GetNonIndexed()
    {
      return new TokenLocked
      {
        OracleNodeAddress = OracleNodeAddress,
        FromAddress = FromAddress,
        LockedAmount = LockedAmount,
      };
    }
  }

  #endregion
}
#endregion

